{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nexport default {\n  name: 'CreatePage',\n  data() {\n    return {\n      form: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      errorMessages: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      showPassword: false\n    };\n  },\n  computed: {\n    // 密码复杂度验证\n    hasLowerCase() {\n      return /[a-z]/.test(this.form.password);\n    },\n    hasUpperCase() {\n      return /[A-Z]/.test(this.form.password);\n    },\n    hasNumber() {\n      return /\\d/.test(this.form.password);\n    },\n    hasMinLength() {\n      return this.form.password.length >= 6;\n    }\n  },\n  methods: {\n    validateField(field) {\n      switch (field) {\n        case 'username':\n          this.errorMessages.username = this.form.username ? '' : '用户名不能为空';\n          break;\n        case 'email':\n          this.validateEmail();\n          break;\n        case 'password':\n          this.validatePassword();\n          this.validateConfirmPassword(); // 同时验证确认密码\n          break;\n        case 'confirmPassword':\n          this.validateConfirmPassword();\n          break;\n      }\n    },\n    validateEmail() {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!this.form.email) {\n        this.errorMessages.email = '邮箱不能为空';\n      } else if (!emailRegex.test(this.form.email)) {\n        this.errorMessages.email = '邮箱格式不正确';\n      } else {\n        this.errorMessages.email = '';\n      }\n    },\n    validatePassword() {\n      if (!this.form.password) {\n        this.errorMessages.password = '密码不能为空';\n      } else if (!this.hasLowerCase || !this.hasUpperCase || !this.hasNumber || !this.hasMinLength) {\n        this.errorMessages.password = '密码不符合复杂度要求';\n      } else {\n        this.errorMessages.password = '';\n      }\n    },\n    validateConfirmPassword() {\n      if (!this.form.confirmPassword) {\n        this.errorMessages.confirmPassword = '请确认密码';\n      } else if (this.form.password !== this.form.confirmPassword) {\n        this.errorMessages.confirmPassword = '两次输入的密码不一致';\n      } else {\n        this.errorMessages.confirmPassword = '';\n      }\n    },\n    validateForm() {\n      this.validateField('username');\n      this.validateEmail();\n      this.validatePassword();\n      this.validateConfirmPassword();\n      return Object.values(this.errorMessages).every(msg => msg === '');\n    },\n    handleRegister() {\n      if (this.validateForm()) {\n        // 这里可以调用注册API\n        console.log('注册信息：', this.form);\n        // 示例：跳转到登录页面\n        // this.$router.push('/login')\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","form","username","email","password","confirmPassword","errorMessages","showPassword","computed","hasLowerCase","test","hasUpperCase","hasNumber","hasMinLength","length","methods","validateField","field","validateEmail","validatePassword","validateConfirmPassword","emailRegex","validateForm","Object","values","every","msg","handleRegister","console","log"],"sources":["C:\\my-project\\src\\pages\\create\\CreatePage.vue"],"sourcesContent":["<template>\r\n    <div class=\"register-container\">\r\n      <h2>用户注册</h2>\r\n      <form @submit.prevent=\"handleRegister\">\r\n        <!-- 用户名 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">用户名：</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            v-model=\"form.username\"\r\n            placeholder=\"请输入用户名\"\r\n            @input=\"validateField('username')\"\r\n          />\r\n          <div v-if=\"errorMessages.username\" class=\"error-message\">\r\n            {{ errorMessages.username }}\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- 邮箱 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">邮箱：</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            v-model=\"form.email\"\r\n            placeholder=\"请输入邮箱\"\r\n            @input=\"validateField('email')\"\r\n          />\r\n          <div v-if=\"errorMessages.email\" class=\"error-message\">\r\n            {{ errorMessages.email }}\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- 密码 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">密码：</label>\r\n          <div class=\"password-input\">\r\n            <input\r\n              :type=\"showPassword ? 'text' : 'password'\"\r\n              id=\"password\"\r\n              v-model=\"form.password\"\r\n              placeholder=\"请输入密码\"\r\n              @input=\"validateField('password')\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              class=\"toggle-password\"\r\n              @click=\"showPassword = !showPassword\"\r\n            >\r\n              {{ showPassword ? '隐藏' : '显示' }}\r\n            </button>\r\n          </div>\r\n          <div class=\"password-requirements\">\r\n            密码要求：\r\n            <ul>\r\n              <li :class=\"{ valid: hasLowerCase }\">至少一个小写字母</li>\r\n              <li :class=\"{ valid: hasUpperCase }\">至少一个大写字母</li>\r\n              <li :class=\"{ valid: hasNumber }\">至少一个数字</li>\r\n              <li :class=\"{ valid: hasMinLength }\">至少6位字符</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- 确认密码 -->\r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">确认密码：</label>\r\n          <input\r\n            :type=\"showPassword ? 'text' : 'password'\"\r\n            id=\"confirmPassword\"\r\n            v-model=\"form.confirmPassword\"\r\n            placeholder=\"请再次输入密码\"\r\n            @input=\"validateField('confirmPassword')\"\r\n          />\r\n          <div v-if=\"errorMessages.confirmPassword\" class=\"error-message\">\r\n            {{ errorMessages.confirmPassword }}\r\n          </div>\r\n        </div>\r\n  \r\n        <button type=\"submit\" class=\"submit-btn\">立即注册</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'CreatePage',\r\n    data() {\r\n      return {\r\n        form: {\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          confirmPassword: ''\r\n        },\r\n        errorMessages: {\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          confirmPassword: ''\r\n        },\r\n        showPassword: false\r\n      }\r\n    },\r\n    computed: {\r\n      // 密码复杂度验证\r\n      hasLowerCase() {\r\n        return /[a-z]/.test(this.form.password)\r\n      },\r\n      hasUpperCase() {\r\n        return /[A-Z]/.test(this.form.password)\r\n      },\r\n      hasNumber() {\r\n        return /\\d/.test(this.form.password)\r\n      },\r\n      hasMinLength() {\r\n        return this.form.password.length >= 6\r\n      }\r\n    },\r\n    methods: {\r\n      validateField(field) {\r\n        switch (field) {\r\n          case 'username':\r\n            this.errorMessages.username = this.form.username ? '' : '用户名不能为空'\r\n            break\r\n          case 'email':\r\n            this.validateEmail()\r\n            break\r\n          case 'password':\r\n            this.validatePassword()\r\n            this.validateConfirmPassword() // 同时验证确认密码\r\n            break\r\n          case 'confirmPassword':\r\n            this.validateConfirmPassword()\r\n            break\r\n        }\r\n      },\r\n  \r\n      validateEmail() {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n        if (!this.form.email) {\r\n          this.errorMessages.email = '邮箱不能为空'\r\n        } else if (!emailRegex.test(this.form.email)) {\r\n          this.errorMessages.email = '邮箱格式不正确'\r\n        } else {\r\n          this.errorMessages.email = ''\r\n        }\r\n      },\r\n  \r\n      validatePassword() {\r\n        if (!this.form.password) {\r\n          this.errorMessages.password = '密码不能为空'\r\n        } else if (!this.hasLowerCase || !this.hasUpperCase || !this.hasNumber || !this.hasMinLength) {\r\n          this.errorMessages.password = '密码不符合复杂度要求'\r\n        } else {\r\n          this.errorMessages.password = ''\r\n        }\r\n      },\r\n  \r\n      validateConfirmPassword() {\r\n        if (!this.form.confirmPassword) {\r\n          this.errorMessages.confirmPassword = '请确认密码'\r\n        } else if (this.form.password !== this.form.confirmPassword) {\r\n          this.errorMessages.confirmPassword = '两次输入的密码不一致'\r\n        } else {\r\n          this.errorMessages.confirmPassword = ''\r\n        }\r\n      },\r\n  \r\n      validateForm() {\r\n        this.validateField('username')\r\n        this.validateEmail()\r\n        this.validatePassword()\r\n        this.validateConfirmPassword()\r\n  \r\n        return Object.values(this.errorMessages).every(msg => msg === '')\r\n      },\r\n  \r\n      handleRegister() {\r\n        if (this.validateForm()) {\r\n          // 这里可以调用注册API\r\n          console.log('注册信息：', this.form)\r\n          // 示例：跳转到登录页面\r\n          // this.$router.push('/login')\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .register-container {\r\n    max-width: 400px;\r\n    margin: 50px auto;\r\n    padding: 30px;\r\n    border: 1px solid #e0e0e0;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  h2 {\r\n    text-align: center;\r\n    color: #333;\r\n    margin-bottom: 30px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin-bottom: 8px;\r\n    color: #666;\r\n  }\r\n  \r\n  input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  input:focus {\r\n    outline: none;\r\n    border-color: #409eff;\r\n    box-shadow: 0 0 8px rgba(64, 158, 255, 0.2);\r\n  }\r\n  \r\n  .password-input {\r\n    position: relative;\r\n  }\r\n  \r\n  .toggle-password {\r\n    position: absolute;\r\n    right: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    background: none;\r\n    border: none;\r\n    color: #666;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .password-requirements {\r\n    margin-top: 8px;\r\n    font-size: 12px;\r\n    color: #666;\r\n  }\r\n  \r\n  .password-requirements ul {\r\n    list-style: none;\r\n    padding-left: 20px;\r\n    margin: 5px 0;\r\n  }\r\n  \r\n  .password-requirements li {\r\n    position: relative;\r\n    color: #f56c6c;\r\n  }\r\n  \r\n  .password-requirements li:before {\r\n    content: '✖';\r\n    position: absolute;\r\n    left: -15px;\r\n  }\r\n  \r\n  .password-requirements li.valid {\r\n    color: #67c23a;\r\n  }\r\n  \r\n  .password-requirements li.valid:before {\r\n    content: '✓';\r\n  }\r\n  \r\n  .submit-btn {\r\n    width: 100%;\r\n    padding: 12px;\r\n    background-color: #67c23a;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .submit-btn:hover {\r\n    background-color: #85ce61;\r\n  }\r\n  \r\n  .error-message {\r\n    color: #f56c6c;\r\n    font-size: 12px;\r\n    margin-top: 5px;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}